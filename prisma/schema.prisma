generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id String @id @default(uuid())

  code        String @unique
  description String
  price       Float

  Storage              Storage[]
  StockProductEntryLog InventoryMovementLog[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("products")
}

model Stock {
  id String @id @default(uuid())

  name        String @unique
  description String

  StockLocation StockLocation[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("stocks")
}

model StockLocation {
  id String @id @default(uuid())

  code        String @unique
  description String
  stock_id    String

  stock Stock @relation(fields: [stock_id], references: [id])

  Storage              Storage[]
  StockProductEntryLog InventoryMovementLog[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("stock_locations")
}

model Storage {
  id String @id @default(uuid())

  amount Float

  StockLocation     StockLocation @relation(fields: [stock_location_id], references: [id])
  stock_location_id String
  Product           Product       @relation(fields: [product_id], references: [id])
  product_id        String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("storages")
}

enum TypeInventoryMovementLog {
  Exit
  Entry
}

model InventoryMovementLog {
  id String @id @default(uuid())

  amount_stored     Float
  StockLocation     StockLocation            @relation(fields: [stock_location_id], references: [id])
  stock_location_id String
  Product           Product                  @relation(fields: [product_id], references: [id])
  product_id        String
  type              TypeInventoryMovementLog @default(Entry)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("invetory_movement_logs")
}
